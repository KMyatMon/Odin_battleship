/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/computerAI.js":
/*!***************************!*\
  !*** ./src/computerAI.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * \n**/\nconst helpers = __webpack_require__(/*! ./helper.js */ \"./src/helper.js\");\nconst Player = __webpack_require__(/*! ./player.js */ \"./src/player.js\");\n\nfunction Computer() {\n  const comp = Player();\n  \n  function dumbAI() {\n    let x = Math.floor((Math.random())*10);\n    let y = Math.floor((Math.random())*10);\n  \n    while (true) {\n      if (this.getGameboard().getBoard()[y][x].isHit) {\n        x = Math.floor((Math.random())*10);\n        y = Math.floor((Math.random())*10);\n      } else {\n        break;\n      }\n    }\n  \n    return {x, y};\n  }\n\n  let straightAIX = 0;\n  let straightAIY = 0;\n\n  function straightAI(enemy) {\n    let x = straightAIX;\n    let y = straightAIY;\n\n    if (straightAIX + 1 > 9) {\n      straightAIX = 0;\n      straightAIY++;\n    } else straightAIX++;\n\n    if (enemy) {\n      while (enemy.getGameboard().getBoard()[y][x].isHit) {\n        x = straightAIX;\n        y = straightAIY;\n\n        if (straightAIX + 1 > 9) {\n          straightAIX = 0;\n          straightAIY++;\n        } else straightAIX++;\n      }\n    }\n\n    return {x,y};\n  }\n  \n  /**\n   * smartHistory\n   * -xy (current)\n   * -top, left, right, bottom (of cirrent)\n   * -found\n   *  -orient (h / v)\n   *  -start\n   *  -next\n   *  -streak (boolean)\n   *  -currop (- / +) //set it when you set found\n   */\n\n  let smartHistory = null;\n\n  function smartAI(enemy) {\n    if (smartHistory && !enemy.getGameboard().getBoard()[smartHistory.found.start.y][smartHistory.found.start.x].ship.isSunk()) {\n      let xy;\n      if (smartHistory.found.next) {\n\n        xy = smartHistory.found.next;\n        \n        // while (!isValid(xy) || enemy.getGameboard().getBoard()[xy.y][xy.x].isHit) {\n        //   console.log('here in loop');\n        //   if (smartHistory.found.orient == 'h') {\n        //     // if (smartHistory.found.start.x > smartHistory.found.next.x) {\n        //     //   xy = {x: xy.x + 1, y: xy.y};\n        //     //   smartHistory.found.currop = '+';\n        //     // } else {\n        //     //   xy = {x: xy.x - 1, y: xy.y};\n        //     //   smartHistory.found.currop = '-'; \n        //     // }\n\n        //   }\n        //   else if (smartHistory.found.start.y > smartHistory.found.next.y) {\n        //     xy = {x: xy.x, y: xy.y + 1};\n        //     smartHistory.found.currop = '+';\n        //   } else {\n        //     xy = {x: xy.x, y: xy.y - 1};\n        //     smartHistory.found.currop = '-';\n        //   }\n\n        // }\n        \n        console.log('before new code: xy: ', xy)\n\n        if ((!isValid(xy) || enemy.getGameboard().getBoard()[xy.y][xy.x].isHit) && smartHistory.found.streak) {\n          console.log('In new code');\n          if (smartHistory.found.orient == 'h') {\n            if (smartHistory.found.currop == '+') {\n              let count = 0;\n              while ((!isValid(xy) || enemy.getGameboard().getBoard()[xy.y][xy.x].isHit) && count < 20 ) {\n                xy = {x: xy.x - 1, y : xy.y};\n                count++;\n              }\n              if (!(count < 20)) console.log('VERY MAJOR ERROR');\n              smartHistory.found.currop = '-';\n            } else {\n              let count = 0;\n              while ((!isValid(xy) || enemy.getGameboard().getBoard()[xy.y][xy.x].isHit) && count < 20 ) {\n                xy = {x: xy.x + 1, y : xy.y};\n                count++;\n              }\n              if (!(count < 20)) console.log('VERY MAJOR ERROR');\n              smartHistory.found.currop = '+';\n            }\n          } else {\n            if (smartHistory.found.currop == '+') {\n              let count = 0;\n              while ((!isValid(xy) || enemy.getGameboard().getBoard()[xy.y][xy.x].isHit) && count < 20 ) {\n                xy = {x: xy.x, y : xy.y - 1};\n                count++;\n              }\n              if (!(count < 20)) console.log('VERY MAJOR ERROR');\n              smartHistory.found.currop = '-';\n            } else {\n              let count = 0;\n              while ((!isValid(xy) || enemy.getGameboard().getBoard()[xy.y][xy.x].isHit) && count < 20 ) {\n                xy = {x: xy.x, y : xy.y + 1};\n                count++;\n              }\n              if (!(count < 20)) console.log('VERY MAJOR ERROR');\n              smartHistory.found.currop = '+';\n            }\n          }\n          console.log('result of new code :', xy);\n        }\n\n\n\n        if (smartHistory.found.streak) {\n          if (smartHistory.found.currop == '+') smartHistory.found.next = (smartHistory.found.orient == 'h') ? {x: xy.x + 1, y: xy.y} : {x: xy.x, y: xy.y + 1};\n          else smartHistory.found.next = smartHistory.found.orient == 'h' ? {x: xy.x - 1, y: xy.y} : {x: xy.x, y: xy.y - 1};\n        } else {\n          if (smartHistory.found.currop == '+') {\n            smartHistory.found.next = smartHistory.found.orient == 'h' ? \n            {x: smartHistory.found.start.x - 1, y: smartHistory.found.start.y} : \n            {x: smartHistory.found.start.x, y: smartHistory.found.start.y - 1};\n            smartHistory.found.currop = '-';\n\n            xy = smartHistory.found.next;\n\n            smartHistory.found.next = smartHistory.found.orient == 'h' ? \n            {x: xy.x - 1, y: xy.y} : \n            {x: xy.x, y: xy.y - 1};\n\n          } else {\n            smartHistory.found.next = smartHistory.found.orient == 'h' ? \n            {x: smartHistory.found.start.x + 1, y: smartHistory.found.start.y} : \n            {x: smartHistory.found.start.x, y: smartHistory.found.start.y + 1};\n            smartHistory.found.currop = '+';\n\n            xy = smartHistory.found.next;\n\n            smartHistory.found.next = smartHistory.found.orient == 'h' ? \n            {x: xy.x + 1, y: xy.y} : \n            {x: xy.x, y: xy.y + 1};\n          }\n        }\n\n        if (enemy.getGameboard().getBoard()[xy.y][xy.x].ship) smartHistory.found.streak = true;\n        else smartHistory.found.streak = false;\n\n      } else {\n        let temp;\n        if (smartHistory.top) { \n          smartHistory.found.next = smartHistory.top;\n          temp = 't';\n        }\n        else if (smartHistory.right) { \n          smartHistory.found.next = smartHistory.right;\n          temp = 'r';\n        }\n        else if (smartHistory.bottom) { \n          smartHistory.found.next = smartHistory.bottom; \n          temp = 'b';\n        }\n        else { \n          smartHistory.found.next = smartHistory.left;\n          temp = 'l'\n        }\n\n        xy = smartHistory.found.next;\n\n        if (enemy.getGameboard().getBoard()[xy.y][xy.x].ship) {\n          if (temp == 't' || temp == 'l') smartHistory.found.currop = '-';\n          else smartHistory.found.currop = '+';\n\n          smartHistory.found.streak = true;\n          let {horizontal, length} = comp.getGameboard().getLenAndDirection(smartHistory.found.start, smartHistory.found.next);\n          smartHistory.found.orient = (horizontal) ? 'h' : 'v';\n\n          if (horizontal) smartHistory.found.next = smartHistory.found.currop == '+' ? {x: xy.x + 1, y: xy.y} : {x: xy.x - 1, y: xy.y};\n          else smartHistory.found.next = smartHistory.found.currop == '+' ? {x: xy.x, y: xy.y + 1} : {x: xy.x, y: xy.y - 1};\n\n        } else {\n          smartHistory.found.next = null;\n          if (temp == 't') smartHistory.top = null;\n          if (temp == 'r') smartHistory.right = null;\n          if (temp == 'b') smartHistory.bottom = null;\n          if (temp == 'l') smartHistory.left = null;\n        }\n        console.log('trying to find first next: ', JSON.stringify(smartHistory));\n      }\n\n      return xy;\n\n    } else {\n      smartHistory = null;\n      let num = Math.floor(Math.random() * 100);\n      let xy = helpers.numToXY(num);\n      while (enemy.getGameboard().getBoard()[xy.y][xy.x].isHit) {\n        num = Math.floor(Math.random() * 100);\n        xy = helpers.numToXY(num);\n      }\n\n\n      if (enemy.getGameboard().getBoard()[xy.y][xy.x].ship) {\n        let top = {x: xy.x, y: xy.y - 1};\n        if (!isValid(top)) top = null;\n        else if (enemy.getGameboard().getBoard()[top.y][top.x].isHit) top = null;\n\n        let left = {x: xy.x - 1, y: xy.y};\n        if (!isValid(left)) left = null;\n        else if (enemy.getGameboard().getBoard()[left.y][left.x].isHit) left = null;\n\n        let right = {x: xy.x + 1, y: xy.y};\n        if (!isValid(right)) right = null;\n        else if (enemy.getGameboard().getBoard()[right.y][right.x].isHit) right = null;\n\n        let bottom = {x: xy.x, y: xy.y + 1};\n        if (!isValid(bottom)) bottom = null;\n        else if (enemy.getGameboard().getBoard()[bottom.y][bottom.x].isHit) bottom = null;\n\n        let hist = {xy, top, left, right, bottom};\n        hist.found = {};\n        hist.found.start = xy;\n        hist.found.next = null;\n        smartHistory = hist;\n      }\n      console.log('Just found: ', JSON.stringify(smartHistory));\n      return xy;\n    }\n  \n  }\n\n  function isValid(obj) {\n    return obj.x >= 0 && obj.x < 10 && obj.y >= 0 && obj.y < 10;\n  }\n\n  comp.isValid = isValid;\n  \n  // comp.ai = dumbAI;\n  // comp.ai = straightAI;\n  comp.ai = smartAI;\n  \n  comp.attack = function attack(enemy, coordinate) {\n    // if (!(coordinate.x && coordinate.y)) coordinate = this.ai();\n\n    return enemy.getGameboard().receiveAttack(coordinate.x, coordinate.y);\n  }\n  \n  \n  comp.printBoard = function() {\n    let ss = '';\n    for (let i = 0; i < 10; i++) {\n      let str = '';\n      for (let j = 0; j < 10; j++) {\n        if (this.getGameboard().getBoard()[i][j].ship) {\n          str += 'X ';\n        } else str += 'O ';\n      }\n      ss += str;\n      ss += '\\n';\n    }\n    console.log(ss);\n  }\n\n  return comp;\n\n}\n\nmodule.exports = Computer;\n\n\n//# sourceURL=webpack://odin_battleship/./src/computerAI.js?");

/***/ }),

/***/ "./src/gameboard.js":
/*!**************************!*\
  !*** ./src/gameboard.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Ship = __webpack_require__(/*! ./ship.js */ \"./src/ship.js\");\r\nconst helpers = __webpack_require__(/*! ./helper.js */ \"./src/helper.js\");\r\n\r\nfunction Gameboard() {\r\n  let board = [[], [], [], [], [], [], [], [], [], []];\r\n  const boardHeight = 10;\r\n  const boardWidth = 10;\r\n\r\n  function Cell(x, y) {\r\n    return {\r\n      x: x,\r\n      y: y,\r\n      isHit: false,\r\n      ship: null,\r\n    };\r\n  }\r\n\r\n  for (let i = 0; i < boardHeight; i++) {\r\n    for (let j = 0; j < boardWidth; j++) {\r\n      board[i].push(Cell(j, i));\r\n    }\r\n  }\r\n\r\n  function printBoard() {\r\n    let ss = '';\r\n    for (let i = 0; i < 10; i++) {\r\n      let str = '';\r\n      for (let j = 0; j < 10; j++) {\r\n        if (this.getBoard()[i][j].ship) {\r\n          str += 'X ';\r\n        } else str += 'O ';\r\n      }\r\n      ss += str;\r\n      ss += '\\n';\r\n    }\r\n    console.log(ss);\r\n  }\r\n\r\n  function getLenAndDirection(start, end) {\r\n    let horizontal = start.x == end.x ? false : true;\r\n    let length = ( horizontal ? end.x - start.x : end.y - start.y ) + 1;\r\n    return {horizontal, length};\r\n  }\r\n\r\n  function placeShip(start, end) {\r\n    let {horizontal, length} = getLenAndDirection(start, end);\r\n    let ship = Ship(length);\r\n    if (horizontal) {\r\n      for (let i = start.x; i <= end.x; i++) {\r\n        if (board[start.y][i].ship) throw new Error('ship already exists');\r\n        board[start.y][i].ship = ship;\r\n      }\r\n    } else {\r\n      for (let i = start.y; i <= end.y; i++) {\r\n        if (board[i][start.x].ship) throw new Error('ship already exists');\r\n        board[i][start.x].ship = ship;\r\n      }\r\n    }\r\n  }\r\n\r\n  function removeShip(start, end) {\r\n    let {horizontal, length} = getLenAndDirection(start, end);\r\n    if (horizontal) {\r\n      for (let i = start.x; i <= end.x; i++) {\r\n        board[start.y][i].ship = null;\r\n      }\r\n    } else {\r\n      for (let i = start.y; i <= end.y; i++) {\r\n        board[i][start.x].ship = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  function removeAllShips() {\r\n    for (let i = 0; i < boardHeight; i++) {\r\n      for (let j = 0; j < boardWidth; j++) {\r\n        board[i][j].ship = null;\r\n        board[i][j].isHit = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  function receiveAttack(x,y) {\r\n    board[y][x].isHit = true;\r\n    if(board[y][x].ship) {\r\n      board[y][x].ship.hit();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function getBoard() {\r\n    return board;\r\n  }\r\n\r\n  function allShipsSunk() {\r\n    for (let i = 0; i < boardHeight; i++) {\r\n      for (let j = 0; j < boardWidth; j++) {\r\n        if (board[i][j].ship) {\r\n          if (!board[i][j].ship.sunk) return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function validPlacement(start, end) {\r\n    if (start.x > 9 || start.y > 9 || end.x > 9 || end.y > 9) return false;\r\n    if (start.x < 0 || start.y < 0 || end.x < 0 || end.y < 0) return false;\r\n    let {horizontal, length} = getLenAndDirection(start, end);\r\n    if (horizontal) {\r\n      for (let i = start.x - 1; i <= end.x + 1; i++) {\r\n        if (i < 0) continue;\r\n        if (i > 9) continue;\r\n        if (board[start.y][i].ship) return false;\r\n\r\n        if (start.y - 1 >= 0) {\r\n          if (board[start.y - 1][i].ship) return false;\r\n        }\r\n        if (start.y + 1 <= 9) {\r\n          if (board[start.y + 1][i].ship) return false;\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = start.y - 1; i <= end.y + 1; i++) {\r\n        if (i < 0) continue;\r\n        if (i > 9) continue;\r\n        if (board[i][start.x].ship) return false;\r\n\r\n        if (start.x - 1 >= 0) {\r\n          if (board[i][start.x - 1].ship) return false;\r\n        }\r\n        if (start.x + 1 <= 9) {\r\n          if (board[i][start.x + 1].ship) return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function getShipFromNum(num) {\r\n    let a = helpers.numToXY(num);\r\n    return board[a.y][a.x].ship;\r\n  }\r\n\r\n  return {\r\n    getLenAndDirection, placeShip, getBoard, receiveAttack,\r\n    allShipsSunk, validPlacement, removeShip, printBoard,\r\n    removeAllShips, getShipFromNum,\r\n  }\r\n};\r\n\r\nmodule.exports = Gameboard;\n\n//# sourceURL=webpack://odin_battleship/./src/gameboard.js?");

/***/ }),

/***/ "./src/helper.js":
/*!***********************!*\
  !*** ./src/helper.js ***!
  \***********************/
/***/ ((module) => {

eval("const helpers = (function() {\r\n    function numToXY(num) {\r\n      num = Number(num);\r\n      let x = num % 10;\r\n      let y = Math.floor(num / 10);\r\n      return {x, y};\r\n    }\r\n  \r\n    function xyToNum(x, y) {\r\n      return (y * 10) + x\r\n    }\r\n  \r\n    function getEnd(coordinates, orientation, length) {\r\n      let end = {};\r\n      length = Number(length);\r\n      if (orientation == 'h') {\r\n        end.x = coordinates.x + length - 1;\r\n        end.y = coordinates.y;\r\n        \r\n        // while(end.x > 9) {\r\n        //   coordinates.x = coordinates.x - 1;\r\n        //   end.x = end.x - 1;\r\n        // }\r\n  \r\n      } else {\r\n        end.y = coordinates.y + length - 1;\r\n        end.x = coordinates.x;\r\n  \r\n        // while(end.y > 9) {\r\n        //   coordinates.y = coordinates.y - 1;\r\n        //   end.y = end.y - 1;\r\n        // }\r\n      }\r\n  \r\n      return end;\r\n    }\r\n  \r\n    function shadeArea(start, end) {\r\n      if (start.x == end.x) {\r\n        for (let i = 0; i < end.y - start.y + 1; i++) {\r\n          let box = document.querySelector(`.grid1 [data-val='${xyToNum(start.x, start.y + i)}']`);\r\n          box.style.cssText = `\r\n          border-left: 2px solid yellowgreen;\r\n          border-right: 2px solid yellowgreen;\r\n          opacity: 1;\r\n          `;\r\n          if (i == 0) {\r\n            box.style.cssText += `\r\n            border-top: 2px solid yellowgreen;\r\n            `;\r\n          }\r\n  \r\n          if (i == end.x - start.x) {\r\n            box.style.cssText += `\r\n            border-bottom: 2px solid yellowgreen;\r\n            `;\r\n          }\r\n        }\r\n      } else {\r\n        for (let i = 0; i < end.x - start.x + 1; i++) {\r\n          let box = document.querySelector(`.grid1 [data-val='${xyToNum(start.x + i, start.y)}']`);\r\n          box.style.cssText = `\r\n          border-top: 2px solid yellowgreen;\r\n          border-bottom: 2px solid yellowgreen;\r\n          opacity: 1;\r\n          `;\r\n          if (i == 0) {\r\n            box.style.cssText += `\r\n            border-left: 2px solid yellowgreen;\r\n            `;\r\n          }\r\n  \r\n          if (i == end.x - start.x) {\r\n            box.style.cssText += `\r\n            border-right: 2px solid yellowgreen;\r\n            `;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    function unshadeArea(start, end) {\r\n      if (start.x == end.x) {\r\n        for (let i = 0; i < end.y - start.y + 1; i++) {\r\n          let box = document.querySelector(`.grid1 [data-val='${xyToNum(start.x, start.y + i)}']`);\r\n          box.style.cssText = '';\r\n        }\r\n      } else {\r\n        for (let i = 0; i < end.x - start.x + 1; i++) {\r\n          let box = document.querySelector(`.grid1 [data-val='${xyToNum(start.x + i, start.y)}']`);\r\n          box.style.cssText = '';\r\n        }\r\n      }\r\n    }\r\n  \r\n    return {\r\n      numToXY, unshadeArea,\r\n      xyToNum, getEnd, shadeArea,\r\n    };\r\n  })();\r\n  \r\n  module.exports = helpers;\n\n//# sourceURL=webpack://odin_battleship/./src/helper.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("document.querySelector('.enter').addEventListener('click', function() {\r\n    document.querySelector(\".start\").style.display = \"none\";\r\n    document.querySelector(\".board\").style.display = \"block\";\r\n  });\r\n\r\n  const helpers = __webpack_require__(/*! ./helper.js */ \"./src/helper.js\");\r\n  // const Gameboard = require('./gameboard.js');\r\n  const Computer = __webpack_require__(/*! ./computerAI.js */ \"./src/computerAI.js\");\r\n  const Player = __webpack_require__(/*! ./player.js */ \"./src/player.js\");\r\n  // const Ship = require('./ship.js');\r\n  const computer = Computer();\r\n  const player = Player();\r\n  \r\n  let boats = document.querySelectorAll('.boat');\r\n  let gridboxes = document.querySelectorAll('.grid1 > div');\r\n  let grid2 = document.querySelector('.grid2');\r\n  let grid1 = document.querySelector('.grid1');\r\n  let enabledrop = false;\r\n  \r\n  const boatSpots = document.querySelectorAll('.spot');\r\n  \r\n  const resetButton = document.querySelector('.reset');\r\n  const randomiseButton = document.querySelector('.randomise');\r\n  const playButton = document.querySelector('.play');\r\n  \r\n  const notifications = document.querySelector('.header .notifications');\r\n  \r\n  disableGrid(grid2);\r\n  \r\n  function handleDragStart(event) {\r\n    this.style.opacity = '0.2';\r\n    this.classList.add('temp');\r\n    if (this.getAttribute('data-placed') == '1') {\r\n      player.getGameboard().removeShip(\r\n        helpers.numToXY(\r\n          this.parentElement.getAttribute('data-val')\r\n        ),\r\n        helpers.getEnd(\r\n          helpers.numToXY(\r\n            this.parentElement.getAttribute('data-val')\r\n          ),\r\n          this.getAttribute('data-orient'),\r\n          this.getAttribute('data-length')\r\n        )\r\n      );\r\n    }\r\n  \r\n  }\r\n  \r\n  function handleDragEnd(event) {\r\n    this.style.opacity = '1';\r\n    this.classList.remove('temp');\r\n    if (!this.parentElement.classList.contains('spot')) {\r\n      let num = Number(this.parentElement.getAttribute('data-val'));\r\n      player.getGameboard().placeShip(\r\n        helpers.numToXY(num),\r\n        helpers.getEnd(\r\n          helpers.numToXY(num),\r\n          this.getAttribute('data-orient'),\r\n          this.getAttribute('data-length')\r\n        )\r\n      );\r\n      this.setAttribute('data-placed', '1');\r\n    }\r\n  \r\n    gridboxes.forEach((x) => {\r\n      x.classList.remove('over');\r\n      x.style.cssText = '';\r\n    });\r\n  \r\n    let test = 0;\r\n    boatSpots.forEach((spot) => {\r\n      if (spot.children.length > 0) test++;\r\n    });\r\n  \r\n    if (!test) {\r\n      setTimeout(() => {\r\n        playButton.removeAttribute('disabled');\r\n        document.querySelector('.contents').style.display = 'none';\r\n      }, 500);\r\n    }\r\n  \r\n  }\r\n  \r\n  function handleDragEnter(event) {\r\n    let boat = document.querySelector('.temp');\r\n    let length = Number(boat.getAttribute('data-length'));\r\n    let orientation = boat.getAttribute('data-orient');\r\n    let boxVal = Number(this.getAttribute('data-val'));\r\n    let coordinates = helpers.numToXY(boxVal);\r\n  \r\n    let end = helpers.getEnd(coordinates, orientation, length);\r\n    \r\n    if (player.getGameboard().validPlacement(coordinates, end)) {\r\n      helpers.shadeArea(coordinates, end);\r\n      enabledrop = true;\r\n    } else {\r\n      enabledrop = false;\r\n    }\r\n  }\r\n  \r\n  function handleDragLeave(event) {\r\n    let boat = document.querySelector('.temp');\r\n    let length = Number(boat.getAttribute('data-length'));\r\n    let orientation = boat.getAttribute('data-orient');\r\n    let boxVal = Number(this.getAttribute('data-val'));\r\n    let coordinates = helpers.numToXY(boxVal);\r\n  \r\n    let end = helpers.getEnd(coordinates, orientation, length);\r\n    helpers.unshadeArea(coordinates, end);\r\n    \r\n  }\r\n  \r\n  function handleDragOver(event) {\r\n    if (!enabledrop) return;\r\n    event.preventDefault();\r\n    return false;\r\n  }\r\n  \r\n  function handleDrop(event) {\r\n    if (!enabledrop) return;\r\n    let boat = document.querySelector('.temp');\r\n  \r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.appendChild(boat);\r\n  \r\n    if (boat.getAttribute('data-placed') == '0') {\r\n      boat.addEventListener('click', handleClick);\r\n    }\r\n  \r\n    return false;\r\n  }\r\n  \r\n  boats.forEach((boat) => {\r\n    boat.addEventListener('dragstart', handleDragStart);\r\n    boat.addEventListener('dragend', handleDragEnd);\r\n  });\r\n  \r\n  \r\n  \r\n  function handleClick(event) {\r\n    event.stopPropagation();\r\n    let possible = false;\r\n    let orientation = this.getAttribute('data-orient');\r\n    let length = Number(this.getAttribute('data-length'));\r\n    let boxVal = Number(this.parentElement.getAttribute('data-val'));\r\n    let coordinates = helpers.numToXY(boxVal);\r\n  \r\n    player.getGameboard().removeShip(coordinates, helpers.getEnd(coordinates, orientation, length));\r\n  \r\n    let end = {};\r\n    if (orientation == 'h') {\r\n      end.y = coordinates.y + length - 1;\r\n      end.x = coordinates.x;\r\n    \r\n      if (player.getGameboard().validPlacement(coordinates, end)) {\r\n        possible = true;\r\n      } \r\n      else {\r\n        player.getGameboard().placeShip(coordinates, helpers.getEnd(coordinates, orientation, length));\r\n      }\r\n    \r\n    } else {\r\n      end.x = coordinates.x + length - 1;\r\n      end.y = coordinates.y;\r\n      \r\n      if (player.getGameboard().validPlacement(coordinates, end)) {\r\n        possible = true;\r\n      } \r\n      else {\r\n        player.getGameboard().placeShip(coordinates, helpers.getEnd(coordinates, orientation, length));\r\n      }\r\n    \r\n    }\r\n  \r\n    if (possible) {\r\n      let h = this.getAttribute('data-h');\r\n      let w = this.getAttribute('data-w');\r\n      this.style.height = w + 'px';\r\n      this.setAttribute('data-h', w);\r\n      this.style.width = h + 'px';\r\n      this.setAttribute('data-w', h);\r\n  \r\n      if (orientation == 'h') {\r\n        this.setAttribute('data-orient', 'v');\r\n      } else {\r\n        this.setAttribute('data-orient', 'h');\r\n      }\r\n      player.getGameboard().placeShip(coordinates, end);\r\n    } else {\r\n      this.classList.add('animate');\r\n      setTimeout(() => {\r\n        this.classList.remove('animate');\r\n      }, 200)\r\n    }\r\n  }\r\n  \r\n  \r\n  // sync dom grid basing on js grid\r\n  function syncDomGrid() {\r\n    for (let i = 0; i < 10; i++) {\r\n      for (let j = 0; j < 10; j++) {\r\n        if (player.getGameboard().getBoard()[i][j].ship) {\r\n          \r\n          if (i != 0) {\r\n            if (player.getGameboard().getBoard()[i - 1][j].ship) continue;\r\n          }\r\n          if (j != 0) {\r\n            if (player.getGameboard().getBoard()[i][j - 1].ship) continue;\r\n          }\r\n  \r\n          let length = player.getGameboard().getBoard()[i][j].ship.length;\r\n          let orient;\r\n          if (j != 9) {\r\n            orient = player.getGameboard().getBoard()[i][j + 1].ship ? 'h' : 'v';\r\n          } else orient = 'v';\r\n          let boxVal = helpers.xyToNum(j, i);\r\n          \r\n          let dict = ['zero', 'one', 'two', 'three', 'four', 'five'];\r\n          let boat;\r\n          if (length != 3) {\r\n            boat = document.querySelector(`.boat.${dict[length]}`);\r\n          } else {\r\n            boat = document.querySelector(`.boat.three[data-placed=\"0\"]`);\r\n          }\r\n  \r\n          if (orient == 'v') {\r\n            let h = boat.getAttribute('data-h');\r\n            let w = boat.getAttribute('data-w');\r\n            boat.style.height = w + 'px';\r\n            boat.setAttribute('data-h', w);\r\n            boat.style.width = h + 'px';\r\n            boat.setAttribute('data-w', h);\r\n            boat.setAttribute('data-orient', 'v');\r\n          }\r\n  \r\n          document.querySelector(`.grid1 [data-val=\"${boxVal}\"]`).appendChild(boat);\r\n          boat.setAttribute('data-placed', '1');\r\n          boat.addEventListener('click', handleClick);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  function resetGrid() {\r\n    player.getGameboard().removeAllShips();\r\n    let dict = ['two', 'three', 'three', 'four', 'five'];\r\n    let boat;\r\n    for (let i = 0; i < 5; i++) {\r\n      if (i != 2) {\r\n        boat = document.querySelector(`.boat.${dict[i]}`);\r\n        if (boat.parentElement.classList.contains('spot')) continue;\r\n        document.querySelector(`.spot.${dict[i]}`).appendChild(boat);\r\n      } else {\r\n        boat = document.querySelector('.boat.three[data-placed=\"1\"]');\r\n        if (!boat) continue;\r\n        if (boat.parentElement.classList.contains('spot')) continue;\r\n        let x = document.querySelector(`.spot.three .boat`);\r\n        document.querySelectorAll('.spot.three').forEach((y) => {\r\n          if (y !== x) {\r\n            y.appendChild(boat);\r\n          }\r\n        });\r\n      }\r\n  \r\n      boat.setAttribute('data-placed', '0');\r\n      boat.setAttribute('data-orient', 'h')\r\n      let w = Number(boat.getAttribute('data-w'));\r\n      let h = Number(boat.getAttribute('data-h'));\r\n      let temp = w;\r\n      w = w > h ? w : h;\r\n      h = temp == w ? h : temp;\r\n      boat.setAttribute('data-w', w);\r\n      boat.setAttribute('data-h', h);\r\n  \r\n      boat.style.height = h + 'px';\r\n      boat.style.width = w + 'px';\r\n      boat.removeEventListener('click', handleClick)\r\n    } \r\n  }\r\n  \r\n  function removeAllEventListeners() {\r\n    gridboxes.forEach((box) => {\r\n      box.removeEventListener('dragenter', handleDragEnter);\r\n      box.removeEventListener('dragleave', handleDragLeave);\r\n      box.removeEventListener('dragover', handleDragOver);\r\n      box.removeEventListener('drop', handleDrop);\r\n    });\r\n  \r\n    boats.forEach((boat) => {\r\n      boat.removeEventListener('dragstart', handleDragStart);\r\n      boat.removeEventListener('dragend', handleDragEnd);\r\n      boat.removeEventListener('click', handleClick);\r\n      boat.removeAttribute('draggable');\r\n    });  \r\n  }\r\n  \r\n  function disableButtons() {\r\n    resetButton.setAttribute('disabled', 'true');\r\n    randomiseButton.setAttribute('disabled', 'true');\r\n    playButton.setAttribute('disabled', 'true');\r\n  }\r\n  \r\n  function disableGrid(grid) {\r\n    grid.classList.add('disabled');\r\n  }\r\n  \r\n  function enableGrid(grid) {\r\n    grid.classList.remove('disabled');\r\n  }\r\n  \r\n  function randomise() {\r\n    resetGrid();\r\n    player.randomlyPlaceShips();\r\n    syncDomGrid();\r\n    document.querySelector('.contents').style.display = 'none';\r\n    playButton.removeAttribute('disabled');\r\n  }\r\n  \r\n  randomise();\r\n  \r\n  gridboxes.forEach((box) => {\r\n    box.addEventListener('dragenter', handleDragEnter);\r\n  \r\n    box.addEventListener('dragleave', handleDragLeave);\r\n  \r\n    box.addEventListener('dragover', handleDragOver);\r\n  \r\n    box.addEventListener('drop', handleDrop);\r\n  \r\n  });\r\n  \r\n  randomiseButton.addEventListener('click', randomise);\r\n  \r\n  resetButton.addEventListener('click', () => {\r\n    document.querySelector('.contents').style.cssText = '';\r\n    playButton.setAttribute('disabled', 'true');\r\n    resetGrid();\r\n  });\r\n  \r\n  playButton.addEventListener('click', () => {\r\n    removeAllEventListeners();\r\n    disableButtons();\r\n    enableGrid(grid2);\r\n    grid1.classList.add('nodrag');\r\n    \r\n    computer.randomlyPlaceShips();\r\n    // computer.printBoard();\r\n  \r\n    document.querySelectorAll('.grid2 > div').forEach((box) => {\r\n      box.addEventListener('click', attackClick);\r\n    });\r\n    \r\n    document.querySelectorAll('.showprogress').forEach((div) => {\r\n      div.style.cssText = '';\r\n    });\r\n  \r\n    notifications.textContent = 'Good luck!';\r\n  });\r\n  \r\n  function attackClick() {\r\n    let boxnum = Number(this.getAttribute('data-val'));\r\n    \r\n    this.removeEventListener('click', attackClick);\r\n    if (player.attack(computer, helpers.numToXY(boxnum))) {\r\n      const first = document.createElement('div');\r\n      first.classList.add('st');\r\n      const second = document.createElement('div');\r\n      second.classList.add('nd');\r\n    \r\n      this.classList.add('correcthit');\r\n      this.appendChild(first);\r\n      this.appendChild(second);\r\n  \r\n      autoSolve(boxnum, grid2, player, computer);\r\n  \r\n      let shipx = computer.getGameboard().getShipFromNum(boxnum);\r\n      if (shipx.isSunk()) {\r\n        paintSink(computer, shipx, boxnum);\r\n  \r\n        let representation = document.querySelector(`.showprogress.two .rep${shipx.length}[data-sunk='false']`);\r\n        representation.querySelectorAll('div').forEach((div) => {\r\n          div.style.backgroundColor = 'red';\r\n        });\r\n  \r\n        representation.setAttribute('data-sunk', 'true');\r\n        if (computer.lossCondition()) {\r\n          handleLoss(computer);\r\n        }\r\n      }\r\n    } else {\r\n  \r\n      const blackdot = document.createElement('div');\r\n      blackdot.classList.add('blackdot');\r\n      \r\n      enableGrid(grid1);\r\n      disableGrid(grid2);\r\n      this.classList.add('wronghit');\r\n      this.appendChild(blackdot);\r\n      let xy = computer.ai(player);\r\n      console.log('computer ai returns: ', xy);\r\n      \r\n      if (player.getGameboard().getBoard()[xy.y][xy.x].isHit) console.log('IMPOSSIBLE');\r\n  \r\n      let box = document.querySelector(`.grid1 [data-val='${helpers.xyToNum(xy.x, xy.y)}']`);\r\n  \r\n      setTimeout(() => {\r\n        continousComputer(xy, box);\r\n        enableGrid(grid2);\r\n        disableGrid(grid1);\r\n      }, 1000);\r\n  \r\n    }\r\n  };\r\n  \r\n  function paintSink(player, ship, num) {\r\n    num = Number(num);\r\n    //end does not even matter\r\n  \r\n    let length = ship.length;\r\n    let orientation;\r\n    let start;\r\n    let end;\r\n  \r\n    if (player == computer) {\r\n      let res = beforeAfter(num);\r\n      let l, r;\r\n      if (res.before) l = document.querySelector(`.grid2 [data-val='${res.before}']`);\r\n      if (res.after) r = document.querySelector(`.grid2 [data-val='${res.after}']`);\r\n      let left, right;\r\n      if (l) left = l.childNodes.length > 1;\r\n      if (r) right = r.childNodes.length > 1;\r\n  \r\n      orientation = (left || right) ? 'h' : 'v';\r\n  \r\n      start = num;\r\n      let x = num;\r\n  \r\n      let temp = document.querySelector(`.grid2 [data-val='${x}']`);\r\n      if (orientation == 'h') {\r\n        while(temp && temp.childNodes.length > 1) {\r\n          x = x - 1;\r\n          start = x;\r\n          temp = document.querySelector(`.grid2 [data-val='${x}']`);\r\n        }\r\n        start++;\r\n  \r\n        while(!checkSameRow(num, start)) start++;\r\n  \r\n        end = start + length - 1;\r\n      } else {\r\n        while(temp && temp.childNodes.length > 1) {\r\n          x = x - 10;\r\n          start = x;\r\n          temp = document.querySelector(`.grid2 [data-val='${x}']`);\r\n        }\r\n        start += 10;\r\n        end = start + ((length - 1) * 10)\r\n      }\r\n  \r\n      let paint = document.createElement('div');\r\n      paint.classList.add('grid2boat');\r\n      let xx;\r\n      switch (length) {\r\n        case 2:\r\n          xx = 69;\r\n          break;\r\n        case 3:\r\n          xx = 104;\r\n          break;\r\n        case 4:\r\n          xx = 139;\r\n          break;\r\n        case 5:\r\n          xx = 174;\r\n          break;\r\n      }\r\n      if (orientation == 'h') {\r\n        paint.style.height = '33px';\r\n        paint.style.width = `${xx}px`;\r\n      } else {\r\n        paint.style.width = '33px';\r\n        paint.style.height = `${xx}px`;\r\n      }\r\n  \r\n      document.querySelector(`.grid2 [data-val='${start}']`).appendChild(paint);\r\n  \r\n    } else {\r\n      let res = beforeAfter(num);\r\n      let l, r;\r\n      if (res.before) l = document.querySelector(`.grid1 [data-val='${res.before}']`);\r\n      if (res.after) r = document.querySelector(`.grid1 [data-val='${res.after}']`);\r\n      let left, right;\r\n      if (l) left = l.childNodes.length > 1;\r\n      if (r) right = r.childNodes.length > 1;\r\n  \r\n      orientation = (left || right) ? 'h' : 'v';\r\n      start = num;\r\n      let x = num;\r\n      let temp = document.querySelector(`.grid1 [data-val='${x}']`);\r\n  \r\n      if (orientation == 'h') {\r\n        while(temp && temp.childNodes.length > 1) {\r\n          x = x - 1;\r\n          start = x;\r\n          temp = document.querySelector(`.grid1 [data-val='${x}']`);\r\n        }\r\n        start++;\r\n  \r\n        while(!checkSameRow(num, start)) start++;\r\n        \r\n      } else {\r\n        while(temp && temp.childNodes.length > 1) {\r\n          x = x - 10;\r\n          start = x;\r\n          temp = document.querySelector(`.grid1 [data-val='${x}']`);\r\n        }\r\n        start += 10;\r\n      }\r\n      document.querySelector(`.grid1 [data-val='${start}']`).childNodes[0].classList.add('ownhit');\r\n    }\r\n  }\r\n  \r\n  function handleLoss(loser) {\r\n  \r\n    document.querySelectorAll('.grid2 > div').forEach((box) => {\r\n      box.removeEventListener('click', attackClick);\r\n    });\r\n  \r\n    if (loser == player) {\r\n      notifications.style.backgroundColor = 'red';\r\n      notifications.textContent = 'You lose.';\r\n    } else {\r\n      notifications.style.backgroundColor = 'yellowgreen';\r\n      notifications.textContent = 'You win!';\r\n    }\r\n  \r\n    let rematch = document.createElement('button');\r\n    rematch.textContent = 'Play again!';\r\n    rematch.classList.add('rematch');\r\n    rematch.addEventListener('click', () => {\r\n      window.location.reload();\r\n    });\r\n  \r\n    notifications.appendChild(rematch);\r\n    \r\n  }\r\n  \r\n  function continousComputer(xy, box) {\r\n    if (computer.attack(player, xy)) {\r\n      const first = document.createElement('div');\r\n      first.classList.add('st');\r\n      const second = document.createElement('div');\r\n      second.classList.add('nd');\r\n  \r\n      box.classList.add('correcthit');\r\n      box.appendChild(first);\r\n      box.appendChild(second);\r\n  \r\n      autoSolve(Number(box.getAttribute('data-val')), grid1, computer, player);\r\n  \r\n      let shipx = player.getGameboard().getShipFromNum(helpers.xyToNum(xy.x, xy.y));\r\n      if (shipx.isSunk()) {\r\n        paintSink(player, shipx, helpers.xyToNum(xy.x, xy.y));\r\n  \r\n        let representation = document.querySelector(`.showprogress.one .rep${shipx.length}[data-sunk='false']`);\r\n        representation.querySelectorAll('div').forEach((div) => {\r\n          div.style.backgroundColor = 'red';\r\n        });\r\n  \r\n        representation.setAttribute('data-sunk', 'true');\r\n  \r\n        if (player.lossCondition()) {\r\n          handleLoss(player);\r\n          return;\r\n        }\r\n      }\r\n  \r\n      setTimeout(() => {\r\n        let xy = computer.ai(player);\r\n        console.log('computer ai returns: ', xy);\r\n        \r\n        if (player.getGameboard().getBoard()[xy.y][xy.x].isHit) console.log('IMPOSSIBLE');\r\n  \r\n        let box = document.querySelector(`.grid1 [data-val='${helpers.xyToNum(xy.x, xy.y)}']`);\r\n        return continousComputer(xy, box);\r\n      }, 500);\r\n    } else {\r\n  \r\n      const blackdot = document.createElement('div');\r\n      blackdot.classList.add('blackdot');\r\n  \r\n      box.classList.add('wronghit');\r\n      box.appendChild(blackdot);\r\n    }\r\n  }\r\n  \r\n  function autoSolve(num, grid, attacker, enemy) {\r\n    let xy = helpers.numToXY(num);\r\n    let arr = getToBeAutoSolved(xy);\r\n  \r\n  \r\n    if (enemy.getGameboard().getBoard()[xy.y][xy.x].ship.isSunk()) {\r\n  \r\n      let l, r, orientation, start, end;\r\n      let length = enemy.getGameboard().getBoard()[xy.y][xy.x].ship.length;\r\n      if (enemy == computer) {\r\n        let res = beforeAfter(num);\r\n        let l, r;\r\n        if (res.before) l = document.querySelector(`.grid2 [data-val='${res.before}']`);\r\n        if (res.after) r = document.querySelector(`.grid2 [data-val='${res.after}']`);\r\n  \r\n        let left, right;\r\n        if (l) left = l.childNodes.length > 1;\r\n        if (r) right = r.childNodes.length > 1;\r\n  \r\n        orientation = (left || right) ? 'h' : 'v';\r\n  \r\n        start = num;\r\n        let x = num;\r\n  \r\n        let temp = document.querySelector(`.grid2 [data-val='${x}']`);\r\n        if (orientation == 'h') {\r\n          while(temp && temp.childNodes.length > 1) {\r\n            x = x - 1;\r\n            start = x;\r\n            temp = document.querySelector(`.grid2 [data-val='${x}']`);\r\n          }\r\n          start;\r\n          end = start + length + 1;\r\n  \r\n          if (!checkSameRow(num, start)) start = null;\r\n          if (!checkSameRow(num, end)) end = null;\r\n  \r\n        } else {\r\n          while(temp && temp.childNodes.length > 1) {\r\n            x = x - 10;\r\n            start = x;\r\n            temp = document.querySelector(`.grid2 [data-val='${x}']`);\r\n          }\r\n          start;\r\n          end = start + ((length - 1) * 10) + 20;\r\n        }\r\n      } else {\r\n        let res = beforeAfter(num);\r\n        let l, r;\r\n        if (res.before) l = document.querySelector(`.grid1 [data-val='${res.before}']`);\r\n        if (res.after) r = document.querySelector(`.grid1 [data-val='${res.after}']`);\r\n        let left, right;\r\n        if (l) left = l.childNodes.length > 1;\r\n        if (r) right = r.childNodes.length > 1;\r\n    \r\n        orientation = (left || right) ? 'h' : 'v';\r\n    \r\n        start = num;\r\n        let x = num;\r\n    \r\n        let temp = document.querySelector(`.grid1 [data-val='${x}']`);\r\n        if (orientation == 'h') {\r\n          while(temp && temp.childNodes.length > 1) {\r\n            x = x - 1;\r\n            start = x;\r\n            temp = document.querySelector(`.grid1 [data-val='${x}']`);\r\n          }\r\n          start;\r\n          end = start + length + 1;\r\n  \r\n          if (!checkSameRow(num, start)) start = null;\r\n          if (!checkSameRow(num, end)) end = null;\r\n  \r\n        } else {\r\n          while(temp && temp.childNodes.length > 1) {\r\n            x = x - 10;\r\n            start = x;\r\n            temp = document.querySelector(`.grid1 [data-val='${x}']`);\r\n          }\r\n          start;\r\n          end = start + ((length - 1) * 10) + 20;\r\n        }\r\n      }\r\n  \r\n      if (start && 0 < start && start < 100) {\r\n        arr.push(start);\r\n      }\r\n      if (end && 0 < end  && end < 100) {\r\n        arr.push(end);\r\n      }\r\n  \r\n    }\r\n  \r\n    arr.forEach((x) => {\r\n      let y = grid.querySelector(`[data-val='${x}']`);\r\n      if (y && y.childNodes.length == 0) {\r\n        attacker.attack(enemy, helpers.numToXY(x));\r\n        const blackdot = document.createElement('div');\r\n        blackdot.classList.add('blackdot');\r\n        y.appendChild(blackdot);\r\n        y.classList.add('autosolve');\r\n  \r\n        y.removeEventListener('click', attackClick);\r\n      }\r\n    })\r\n  }\r\n  \r\n  function getToBeAutoSolved(xy) {\r\n    let arr = [];\r\n    arr.push({x: xy.x - 1, y: xy.y - 1});\r\n    arr.push({x: xy.x - 1, y: xy.y + 1});\r\n    arr.push({x: xy.x + 1, y: xy.y - 1});\r\n    arr.push({x: xy.x + 1, y: xy.y + 1});\r\n    arr.forEach((obj) => {\r\n      if (obj.x > 9 || obj.x < 0) {\r\n        obj.invalid = true;\r\n      }\r\n      if (obj.y > 9 || obj.y < 0) {\r\n        obj.invalid = true;\r\n      }\r\n    });\r\n    return arr.filter((obj) => {\r\n      return !obj.invalid;\r\n    }).map((obj) => {\r\n      return helpers.xyToNum(obj.x, obj.y);\r\n    })\r\n  }\r\n  \r\n  function beforeAfter(num) {\r\n    let xy = helpers.numToXY(num);\r\n    let before = {x: xy.x - 1, y: xy.y};\r\n    let after = {x: xy.x + 1, y: xy.y};\r\n  \r\n    if (!(before.x >= 0 && before.x <= 9)) before = null;\r\n    if (!(after.x >= 0 && after.x <= 9)) after = null;\r\n  \r\n    if (before) before = helpers.xyToNum(before.x, before.y);\r\n    if (after) after = helpers.xyToNum(after.x, after.y);\r\n  \r\n    return {before, after};\r\n  }\r\n  \r\n  function checkSameRow(num1, num2) {\r\n    let a = Math.floor(num1 / 10);\r\n    let b = Math.floor(num2 / 10);\r\n    return a == b;\r\n  }\r\n  \n\n//# sourceURL=webpack://odin_battleship/./src/index.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * \n**/\nconst Gameboard = __webpack_require__(/*! ./gameboard.js */ \"./src/gameboard.js\");\n\nfunction Player() {\n  const gameboard = Gameboard();\n\n  function getGameboard() {\n    return gameboard;\n  }\n\n  function attack(enemy, coordinate) {\n    return enemy.getGameboard().receiveAttack(coordinate.x, coordinate.y);\n  }\n\n  function lossCondition() {\n    return getGameboard().allShipsSunk();\n  }\n\n  function putShipOnGameBoard(start, end) {\n    gameboard.placeShip(start, end);\n  }\n\n  // gonna need a less random implementation\n  // beacuse this could potentially take a while\n  // or not, maybe I underestimate how fast computers are\n\n  function randomlyPlaceShips() {\n    const shipsBlueprint = [5, 4, 3, 3, 2];\n    let chance, start = {x:null, y:null}, end = {x:null, y:null};\n    for (let i = 0; i < shipsBlueprint.length; i++) {\n      chance = Math.random() * 10;\n      while (true) {\n        start.x = Math.floor((Math.random())*10);\n        start.y = Math.floor((Math.random())*10);\n\n        if (chance < 5) {\n          end.x = start.x + shipsBlueprint[i] - 1;\n          if (end.x > 9) continue;\n          end.y = start.y;\n        } else {\n          end.y = start.y + shipsBlueprint[i] - 1;\n          if (end.y > 9) continue;\n          end.x = start.x;\n        }\n\n        if (getGameboard().validPlacement(start, end)) {\n          break;\n        }\n      }\n      putShipOnGameBoard(start, end);\n    }\n  }\n\n\n  return {\n    attack, getGameboard, lossCondition,\n    putShipOnGameBoard, randomlyPlaceShips,\n  }\n}\n\nmodule.exports = Player;\n\n//# sourceURL=webpack://odin_battleship/./src/player.js?");

/***/ }),

/***/ "./src/ship.js":
/*!*********************!*\
  !*** ./src/ship.js ***!
  \*********************/
/***/ ((module) => {

eval("// \n\nfunction Ship(length) {\n  function hit() {\n    if(this.sunk) return;\n    if (!this.hits) this.hits = 1;\n    else this.hits++;\n    this.isSunk();\n  }\n\n  function isSunk() {\n    if (this.hits == this.length) {\n      this.sunk = true;\n      return true;\n    } else return false;\n  }\n\n  return {\n    length: length,\n    hits: null,\n    sunk: false,\n    hit, isSunk,\n  }\n}\n\nmodule.exports = Ship;\n\n//# sourceURL=webpack://odin_battleship/./src/ship.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;